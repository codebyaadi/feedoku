// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, email, password_hash, created_at, updated_at, oauth_provider, oauth_id, api_key)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8,
    encode(sha256(random()::text::bytea), 'hex')
)
RETURNING id, name, created_at, updated_at, api_key, email, password_hash, oauth_provider, oauth_id
`

type CreateUserParams struct {
	ID            uuid.UUID
	Name          string
	Email         string
	PasswordHash  string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	OauthProvider sql.NullString
	OauthID       sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.OauthProvider,
		arg.OauthID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.Email,
		&i.PasswordHash,
		&i.OauthProvider,
		&i.OauthID,
	)
	return i, err
}

const getUserByAPIKey = `-- name: GetUserByAPIKey :one
SELECT id, name, created_at, updated_at, api_key, email, password_hash, oauth_provider, oauth_id FROM users
WHERE api_key = $1 LIMIT 1
`

func (q *Queries) GetUserByAPIKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.Email,
		&i.PasswordHash,
		&i.OauthProvider,
		&i.OauthID,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, created_at, updated_at, api_key, email, password_hash, oauth_provider, oauth_id FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.Email,
		&i.PasswordHash,
		&i.OauthProvider,
		&i.OauthID,
	)
	return i, err
}

const updateOAuthID = `-- name: UpdateOAuthID :one
UPDATE users
SET oauth_provider = $1, oauth_id = $2
WHERE email = $3
RETURNING id, name, created_at, updated_at, api_key, email, password_hash, oauth_provider, oauth_id
`

type UpdateOAuthIDParams struct {
	OauthProvider sql.NullString
	OauthID       sql.NullString
	Email         string
}

func (q *Queries) UpdateOAuthID(ctx context.Context, arg UpdateOAuthIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateOAuthID, arg.OauthProvider, arg.OauthID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.Email,
		&i.PasswordHash,
		&i.OauthProvider,
		&i.OauthID,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password_hash = $1
WHERE email = $2
RETURNING id, name, created_at, updated_at, api_key, email, password_hash, oauth_provider, oauth_id
`

type UpdateUserPasswordParams struct {
	PasswordHash string
	Email        string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.PasswordHash, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKey,
		&i.Email,
		&i.PasswordHash,
		&i.OauthProvider,
		&i.OauthID,
	)
	return i, err
}
